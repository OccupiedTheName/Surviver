#include <stdio.h>
#include <string.h>

#define WORD_LENGTH 31
#define MAX_LENGTH 10002
#define WEIGHT_TYPE long long
#define POSITION int

typedef enum{ FALSE, TRUE }END;

typedef struct Node *Trie;
struct Node{
	END End;
	WEIGHT_TYPE Weight;
	Trie Son[26];
};

struct{
	int Size;
	struct Node Hahaha[MAX_LENGTH * WORD_LENGTH];
}Buff;

Trie BuildTrie(void);
void Insert(char *, WEIGHT_TYPE, Trie);
void CulMaxWei(int, WEIGHT_TYPE *, Trie, char *);

int main()
{
	int N, XLength;
	WEIGHT_TYPE MaxWeight[MAX_LENGTH];
	char X[MAX_LENGTH];
	Trie Root;
	int i;
	WEIGHT_TYPE Weight;
	char Word[WORD_LENGTH];

	X[0] = '\0';
	while (scanf("%d %s", &N, X + 1)!=EOF){
		Buff.Size = 0;
		MaxWeight[0] = 0;
		XLength = strlen(X + 1);
		Root = BuildTrie();
		for (i = 0; i < N; i++){
			scanf("%s %lld", Word, &Weight);
			Insert(Word, Weight, Root);
		}
		for (i = 1; i <= XLength; i++){
			MaxWeight[i] = -1;
			CulMaxWei(i, MaxWeight, Root, X);
		}
		printf("%lld\n", MaxWeight[XLength]);
	}
}

void CulMaxWei(int i, WEIGHT_TYPE *MaxWeight, Trie Root,char *X)
{
	int j;
	Trie Current = Root;
	POSITION Pos;

	for (j = i; X[j]; j--){
		Pos = X[j] - 'a';
		if (Current->Son[Pos]){
			if (Current->Son[Pos]->End)
				if (MaxWeight[j - 1] != -1)
					if (MaxWeight[j - 1] + Current->Son[Pos]->Weight > MaxWeight[i])
						MaxWeight[i] = MaxWeight[j - 1] + Current->Son[Pos]->Weight;
			Current = Current->Son[Pos];
		}
		else return;
	}
}

void Insert(char *Word, WEIGHT_TYPE Weight, Trie Root)
{
	int i, n = 0;
	Trie Current = Root;
	POSITION Pos;
	
	n = strlen(Word);
	for (i = n - 1; i > -1; i--){
		Pos = Word[i] - 'a';
		if (!Current->Son[Pos])
			Current->Son[Pos] = BuildTrie();
		Current = Current->Son[Pos];
	}
	Current->End = TRUE;
	Current->Weight = Weight;
}

Trie BuildTrie(void)
{
	int i;

	Buff.Hahaha[Buff.Size].End = FALSE;
	for (i = 0; i < 26; i++)
		Buff.Hahaha[Buff.Size].Son[i] = NULL;
	return &Buff.Hahaha[Buff.Size++];
}
